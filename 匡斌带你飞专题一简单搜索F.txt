//F - Prime Path 简单BFS搜索
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;
int n,a,b;
int prime[10010];
int tagprime[10010];
queue<int>q;
int isprime(int x)
{
    int i;
    for(i=2;i*i<=x;i++)
    {
        if(x%i==0)
            return 0;

    }
    return 1;
}
void calPrime()
{
    memset(prime,0,sizeof(prime));
    int m,j;
    j=0;
    for(m=1000;m<10000;m++)
        if(isprime(m))
            prime[j++]=m;
        m=j;
        prime[m]=--j;

}
int getNext(int ans,int old)
{
    int x1,x2,cnt;
    cnt=0;
    while(ans)
    {
        x1=ans%10;
        ans/=10;
        x2=old%10;
        old/=10;
        if(x1!=x2)
            cnt++;
    }
    if(cnt>1||cnt==0)
        return 0;

  return 1;
}
void solve(int x,int y)
{
    int now,temp,i;
    int ceng[100000];
    memset(ceng,0,sizeof(ceng));
  if(x==y)
    cout<<0<<endl;
  else
  {
      q.push(x);
      ceng[x]=0;
      while(!q.empty())
      {
          now=q.front();
          q.pop();
          if(now==y)
          {
              cout<<ceng[now]<<endl;
              break;
          }
          else
          {
              for(i=0;i<1061;i++)
              {
                  if(!tagprime[prime[i]]&&getNext(prime[i],now))
                  {
                      q.push(prime[i]);
                      ceng[prime[i]]=ceng[now]+1;
                      tagprime[prime[i]]=1;
                  }
              }
          }

      }
  }
}
int main()
{
    int i;
    calPrime();

    while(cin>>n)
    {
        for(i=0;i<n;i++)
        {
            cin>>a>>b;
            while(!q.empty())
             q.pop();
             memset(tagprime,0,sizeof(tagprime));

            solve(a,b);
        }
    }

    return 0;
}



///////////////////////////////////////////

#include <iostream>
#include <queue>
using namespace std;

bool ifPrime[10000];
bool ifVisit[10000];
int pathCount[10000];

int main()
{
	/* 学习这种求素数方法
        for ( int i = 0 ; i < 10000 ; i ++ )
		ifPrime[i] = true;
	ifPrime[0] = false;
	ifPrime[1] = false;
	for ( int i = 2 ; i < 100 ; i ++ )
	{
		if ( ifPrime[i] )
			for ( int j = 1 ; i*j < 10000 ; j ++ )
				ifPrime[i*j] = false;
	}
       */
	int number;
	cin>>number;
	int num1, num2;
	for ( int i = 0 ; i < number ; i ++ )
	{
		cin>>num1>>num2;
		queue<int> q;
		for ( int j = 1000 ; j < 10000 ; j ++ )
		{
			ifVisit[j] = false;
			pathCount[j] = 0;
		}
		q.push(num1);
		ifVisit[num1] = true;
		while ( !q.empty() )
		{
			int tempInt = q.front();
			q.pop();
			if ( tempInt == num2 )
			{
				break;
			}
			for ( int t = 1 ; t <= 1000 ; t *= 10 )
			{
				int di = tempInt;
				di /= t;
				di %= 10;
				int w = tempInt - di*t; 
				for ( int j = 0 ; j < 10 ; j ++ )
				{
					if ( t == 1000 && j == 0 )
						continue;
					if ( j != di )
					{
						int nowNum = j*t + w;
						if ( ifPrime[nowNum] && !ifVisit[nowNum] )
						{
							q.push(nowNum);
							pathCount[nowNum] = pathCount[tempInt] +1;
							ifVisit[nowNum] = true;
						}
					}
				}
			}
		}
		cout<<pathCount[num2]<<endl;
	}
}