/*
** Problem: POJ3279
** 题意：有一个M*N的棋盘，每一个格子只有两种状态0或1，每次可以选择一个
** 格子执行翻转操作，并且与该格子相邻的4个格子都会被翻转，求将所有格子
** 都翻转成0所需要的最小操作数，若有多种方案，输出字典序最小的方案数。
**
** 答案题解：枚举第一行的所有翻转状态，在此基础上深搜剩余行的翻转状态。难点:如何模拟翻转过程而且还要翻最少的砖达到全白。黑砖要翻，
** 将周围状态相加利用奇偶性判断该位置是否翻转过，然后决定其下一行是否要置1，因为翻转棋盘flip默认全部都没有翻转过，
** 而我们搜索的顺序就是从第一行逐层向下搜索，因此考虑的也就是该位置本身，以及它的右，左，上，它的下一行必然是没翻转过的状态,
** 所以这个搜索是由上层决定下层的。
*/

#include<stdio.h>
#include<string.h>
#define M 16
#define inf 0x3f3f3f3f
int grid[M][M],m,n;//棋盘默认的状态
int flip[M][M];//翻转过程模拟棋盘,记录每个位置是否做出翻转操作，做出则为1,否则为0
int ans[M][M];//最优结果方案
int dir[][2]={0,0,0,-1,0,1,-1,0};
int isfilpornot(int x,int y)
{
    int i,xx,yy;
    int tmp=grid[x][y];

    for(i=0;i<4;i++)
    {
      xx=x+dir[i][0];
      yy=y+dir[i][1];
      if(xx>=0&&xx<m&&yy>=0&&yy<n)
      tmp+=flip[xx][yy];
    }
    return tmp&1;
}

int dfs(int k)
{
    int j,i,mm;
    if(k==m-1)//最后一行
    {
        for(i=0;i<n;i++)
          if(isfilpornot(k,i))break;
        if(i!=n)
        {

            return -1;
        }

            mm=0;
            for(i=0;i<m;i++)
                for(j=0;j<n;j++)
                 if(flip[i][j])
                    mm++;
                 return mm;

    }
    for(j=0;j<n;j++)
        if(isfilpornot(k,j))//上一层此处翻转了
         flip[k+1][j]=1;//下一行此处置1
     return dfs(k+1);
}

void solve()
{
    //求第一行所有的翻转情况,二进制法枚举全排列
    int i,j;
    int point;
    int cnt=inf;
    int sum;
    int w,z;
    int maxCase=1<<n;
    for(i=0;i<maxCase;i++)
    {
        memset(flip,0,sizeof(flip));//flip初始化为0
        for(j=n-1,point=i;j>=0;j--,point>>=1)//第一行所有翻转情况枚举
        {
            flip[0][j]=point&1;
        }
            sum=dfs(0);//从第一行开始根据当前翻转方法模拟翻转，进行搜索整个棋盘状态

            if(sum!=-1&&sum<cnt)
            {
                cnt=sum;
                memcpy(ans,flip,sizeof(flip));
            }

    }
    if(cnt==inf)
        printf("IMPOSSIBLE\n");
    else
    {
          for(w=0;w<m;w++)
            for(z=0;z<n;z++)
             if(z==n-1)
              printf("%d\n",ans[w][z]);
             else
              printf("%d ",ans[w][z]);

    }

}
int main()
{

   int i,j;
   while(scanf("%d%d",&m,&n)==2)
   {

          for(i=0;i<m;i++)
            for(j=0;j<n;j++)
             scanf("%d",&grid[i][j]);
          solve();

   }
   return 0;
}
